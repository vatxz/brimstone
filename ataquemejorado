import pyautogui as pg
import actions
import constants
import json
from pynput import keyboard
import threading
import my_thread
from my_thread import ThreadGroup
import time

# Función para atacar monstruos
def kill_monster():
    # Inicializar tiempos de reutilización para cada tecla
    last_f2_time = time.time() - 6  # F2 tiene 6 segundos de reutilización
    last_f5_time = time.time() - 8  # F5 tiene 8 segundos de reutilización
    last_f7_time = time.time() - 6  # F7 tiene 6 segundos de reutilización
    
    used_f1 = False  # Bandera para saber si ya usamos F1
    
    while actions.check_battle() is None:
        print("Matando monstruos")
        if event_th.is_set():
            return
        
        # Presionar espacio
        pg.press("space")
        
        # Iniciar rotación de teclas mientras la imagen esté presente
        while pg.locateOnScreen("imgs/redtarget.png", confidence=0.6, region=constants.REGION_BATTLE) is not None:
            if event_th.is_set():
                return
            print("Esperando monstruo morir")
            
            current_time = time.time()  # Obtener el tiempo actual

            # Comienza con F2 si no se ha usado
            if not used_f2 and current_time - last_f2_time >= 6:
                pg.press("f2")
                print("Presionando F2")
                last_f2_time = current_time  # Actualizar el último tiempo en que se presionó F2
                used_f2 = True  # Marcar que F2 ya fue usada

            # Si F2 ya se usó, priorizar F5 y F7
            else:
                # Gestionar reutilización de F5 (8 segundos de reutilización)
                if current_time - last_f5_time >= 8:
                    pg.press("f5")
                    print("Presionando F5")
                    last_f5_time = current_time  # Actualizar el último tiempo en que se presionó F5

                    # Pausa de 2 segundos antes de permitir la siguiente acción (F5)
                    time.sleep(2)

                # Gestionar reutilización de F7 (6 segundos de reutilización)
                if current_time - last_f3_time >= 6:
                    pg.press("f7")
                    print("Presionando F7")
                    last_f7_time = current_time  # Actualizar el último tiempo en que se presionó F7

                    # Pausa de 2 segundos antes de permitir la siguiente acción (F7)
                    time.sleep(2)

            # Añadir una pequeña pausa para no saturar la CPU
            time.sleep(0.1)
        
        print("Buscando monstruo")
        used_f1 = False  # Restablecer la bandera después de cada batalla

# Función para obtener loot
def get_loot():
    loot = pg.locateAllOnScreen("imgs/battle2.PNG", confidence=0.6, region=constants.REGION_BATTLE)
    for box in loot:
        x, y = pg.center(box)
        pg.moveTo(x, y)
        pg.press("f12")
        time.sleep(1)  # Pequeña pausa entre loots

# Función para moverse hacia la bandera en el mapa
def go_to_flag(path, wait):
    flag = pg.locateOnScreen(path, confidence=0.8, region=constants.REGION_MAP)
    if flag:
        x, y = pg.center(flag)
        if event_th.is_set():
            return
        pg.moveTo(x, y)
        pg.click()
        pg.sleep(wait)

# Función para verificar la posición del jugador en el mapa
def check_player_position():
    return pg.locateOnScreen("imgs/player.png", confidence=0.6, region=constants.REGION_MAP)

# Función principal para la ejecución
def run():
    with open(f"{constants.FOLDER_NAME}/infos.json", "r") as file:
        data = json.loads(file.read())
    while not event_th.is_set():
        for item in data:
            if event_th.is_set():
                return
            kill_monster()     
            if event_th.is_set():
                return
            pg.sleep(0.5)
            get_loot()
            if event_th.is_set():
                return
            go_to_flag(item["path"], item["wait"])
            if event_th.is_set():
                return
            if check_player_position():
               kill_monster()
               if event_th.is_set():
                   return
               pg.sleep(0.5)
               get_loot()
               if event_th.is_set():
                   return
               go_to_flag(item["path"], item["wait"])
            actions.eat_food()
            actions.hole_down(item["down_hole"])
            if event_th.is_set():
                return
            actions.hole_up(item["up_hole"], f"{constants.FOLDER_NAME}/Anchfloor3.png", 130, 130)
            actions.hole_up(item["up_hole"], f"{constants.FOLDER_NAME}/Anchfloor2.png", 430, 130)

# Función para controlar el teclado y detener el hilo con la tecla Esc
def key_code(key, th_group):
    if key == keyboard.Key.esc:
        event_th.set()
        th_group.stop()
        return False
    if key == keyboard.Key.delete:
        th_group.start()
        th_run.start()

# Definición de variables globales y hilos
global event_th
event_th = threading.Event()
th_run = threading.Thread(target=run)

th_full_mana = my_thread.MyThread(lambda: actions.check_status("mana", 2, *constants.POSITION_MANA_FULL, constants.COLOR_MANA, ["F6"]))
th_check_life = my_thread.MyThread(lambda: actions.check_status("vida", 1, *constants.POSITION_LIFE, constants.COLOR_GREEN_LIFE, ["F3"]))

group_thread = my_thread.ThreadGroup([th_full_mana, th_check_life])

# Listener para las teclas
with keyboard.Listener(on_press=lambda key: key_code(key, group_thread)) as listener:
    listener.join()

